import 'package:flutter/material.dart';
import '../services/authority_data_service.dart';
import '../../../services/ai_traffic_monitoring_service.dart';

class AlertsPage extends StatefulWidget {
  const AlertsPage({super.key});

  @override
  State<AlertsPage> createState() => _AlertsPageState();
}

class _AlertsPageState extends State<AlertsPage> {
  final service = AuthorityDataService.instance;
  final aiService = AITrafficMonitoringService.instance;
  final List<AlertItem> _alerts = [];

  @override
  void initState() {
    super.initState();
    
    // Add some sample AI alerts to show the purpose immediately
    _addSampleAlerts();
    
    // Listen to regular authority alerts
    service.alertsStream.listen((event) {
      setState(() => _alerts.insert(0, event));
    });
    
    // Listen to AI-generated alerts and convert them
    aiService.aiAlertsStream.listen((aiAlert) {
      final alertItem = AlertItem(
        id: aiAlert.id,
        title: 'ðŸ¤– AI: ${aiAlert.title}',
        description: '${aiAlert.description}\nConfidence: ${(aiAlert.confidence * 100).toInt()}%\nSource: ${aiAlert.sourceType.name}',
        severity: aiAlert.severity,
        timestamp: aiAlert.timestamp,
      );
      setState(() => _alerts.insert(0, alertItem));
    });
  }

  void _addSampleAlerts() {
    final now = DateTime.now();
    
    // Sample AI alerts to show the purpose of this page
    final sampleAlerts = [
      AlertItem(
        id: 'AI_DEMO_1',
        title: 'ðŸ¤– AI: ACCIDENT DETECTED',
        description: 'Computer Vision detected vehicle collision on Highway 101 near Exit 15A\nConfidence: 94%\nSource: Traffic Camera CAM_07\nEstimated Response Time: 8 minutes',
        severity: AlertSeverity.critical,
        timestamp: now.subtract(const Duration(minutes: 3)),
      ),
      AlertItem(
        id: 'AI_DEMO_2',
        title: 'ðŸ¤– AI: Heavy Traffic Congestion',
        description: 'Unusual traffic buildup detected on Main Street intersection\nConfidence: 87%\nSource: IoT Vehicle Counter SENSOR_23\nTraffic Speed: 5 km/h (Normal: 35 km/h)',
        severity: AlertSeverity.warning,
        timestamp: now.subtract(const Duration(minutes: 7)),
      ),
      AlertItem(
        id: 'AI_DEMO_3',
        title: 'ðŸ¤– AI: Sensor Failure Alert',
        description: 'Speed sensor SENSOR_15 stopped responding\nConfidence: 98%\nSource: IoT Network Monitor\nBattery Level: 8% (Critical)\nLast Signal: 12 minutes ago',
        severity: AlertSeverity.warning,
        timestamp: now.subtract(const Duration(minutes: 12)),
      ),
      AlertItem(
        id: 'AI_DEMO_4',
        title: 'ðŸ¤– AI: Stalled Vehicle Detected',
        description: 'Vehicle stationary for 8+ minutes blocking right lane\nConfidence: 91%\nSource: Computer Vision CAM_03\nLocation: Bridge Road, Lane 2',
        severity: AlertSeverity.warning,
        timestamp: now.subtract(const Duration(minutes: 18)),
      ),
      AlertItem(
        id: 'AI_DEMO_5',
        title: 'ðŸ¤– AI: Unusual Traffic Pattern',
        description: 'AI detected abnormal traffic flow - possible road work ahead\nConfidence: 76%\nSource: Pattern Analysis Engine\nAffected Routes: Route 45, Alternative: Route 67',
        severity: AlertSeverity.info,
        timestamp: now.subtract(const Duration(minutes: 25)),
      ),
    ];
    
    setState(() {
      _alerts.addAll(sampleAlerts);
    });
  }

  void _resolve(AlertItem a) {
    setState(() => a.resolved = true);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Header explaining the purpose of this page
        Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.blue.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.blue.withOpacity(0.3)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const Icon(Icons.psychology, color: Colors.blue, size: 24),
                  const SizedBox(width: 8),
                  Text(
                    'AI TRAFFIC MONITORING ALERTS',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Colors.blue,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              const Text(
                'ðŸŽ¯ PURPOSE: This page shows REAL-TIME alerts generated by our AI system:\n'
                'â€¢ ðŸ“¹ Computer Vision analyzes traffic cameras for accidents & congestion\n'
                'â€¢ ðŸ“¡ IoT Sensors monitor vehicle counts, speed, pollution, accidents\n'
                'â€¢ ðŸ¤– AI Engine processes all data and generates instant alerts\n'
                'â€¢ âš¡ Authority gets notified immediately for faster response',
                style: TextStyle(fontSize: 13, height: 1.4),
              ),
            ],
          ),
        ),
        // Alerts list
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            itemCount: _alerts.length,
            itemBuilder: (ctx, i) {
              final a = _alerts[i];
              final color = a.severity == AlertSeverity.critical
                  ? Colors.red
                  : a.severity == AlertSeverity.warning
                      ? Colors.orange
                      : Colors.blueGrey;
              return Card(
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: ListTile(
                  leading: CircleAvatar(
                    backgroundColor: color.withOpacity(0.15),
                    child: Icon(
                      a.severity == AlertSeverity.critical
                          ? Icons.priority_high
                          : a.severity == AlertSeverity.warning
                              ? Icons.warning_amber
                              : Icons.info_outline,
                      color: color,
                    ),
                  ),
                  title: Text(a.title),
                  subtitle: Text('${a.description}\n${a.timestamp.toIso8601String()}'),
                  isThreeLine: true,
                  trailing: a.resolved
                      ? const Icon(Icons.check_circle, color: Colors.green)
                      : TextButton(
                          onPressed: () => _resolve(a),
                          child: const Text('Resolve'),
                        ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}
